{
  "version": 3,
  "sources": ["../../src/entities/security-scheme.ts"],
  "sourcesContent": ["import { z } from 'zod'\n\nimport { type ENTITY_BRANDS, nanoidSchema } from '../utils/nanoid'\n\n// ---------------------------------------------------------------------------\n// COMMON PROPS FOR ALL SECURITY SCHEMES\n\n/** Some common properties used in all security schemes */\nconst commonProps = z.object({\n  /* A description for security scheme. CommonMark syntax MAY be used for rich text representation. */\n  description: z.string().optional(),\n})\n\nconst extendedSecuritySchema = z.object({\n  uid: nanoidSchema.brand<ENTITY_BRANDS['SECURITY_SCHEME']>(),\n  /** The name key that links a security requirement to a security object */\n  nameKey: z.string().optional().default(''),\n})\n\n// ---------------------------------------------------------------------------\n// API KEY\n\nexport const securitySchemeApiKeyIn = ['query', 'header', 'cookie'] as const\n\nconst oasSecuritySchemeApiKey = commonProps.extend({\n  type: z.literal('apiKey'),\n  /** REQUIRED. The name of the header, query or cookie parameter to be used. */\n  name: z.string().optional().default(''),\n  /** REQUIRED. The location of the API key. Valid values are \"query\", \"header\" or \"cookie\". */\n  in: z.enum(securitySchemeApiKeyIn).optional().default('header').catch('header'),\n})\n\nconst apiKeyValueSchema = z.object({\n  value: z.string().default(''),\n})\n\nexport const securityApiKeySchema = oasSecuritySchemeApiKey.merge(extendedSecuritySchema).merge(apiKeyValueSchema)\nexport type SecuritySchemeApiKey = z.infer<typeof securityApiKeySchema>\n\n// ---------------------------------------------------------------------------\n// HTTP\n\nconst oasSecuritySchemeHttp = commonProps.extend({\n  type: z.literal('http'),\n  /**\n   * REQUIRED. The name of the HTTP Authorization scheme to be used in the Authorization header as defined in\n   * [RFC7235]. The values used SHOULD be registered in the IANA Authentication Scheme registry.\n   */\n  scheme: z\n    .string()\n    .toLowerCase()\n    .pipe(z.enum(['basic', 'bearer']))\n    .optional()\n    .default('basic'),\n  /**\n   * A hint to the client to identify how the bearer token is formatted.\n   * Bearer tokens are usually generated by an authorization server, so\n   * this information is primarily for documentation purposes.\n   */\n  bearerFormat: z\n    .union([z.literal('JWT'), z.string()])\n    .optional()\n    .default('JWT'),\n})\n\nconst httpValueSchema = z.object({\n  username: z.string().default(''),\n  password: z.string().default(''),\n  token: z.string().default(''),\n})\n\nexport const securityHttpSchema = oasSecuritySchemeHttp.merge(extendedSecuritySchema).merge(httpValueSchema)\nexport type SecuritySchemaHttp = z.infer<typeof securityHttpSchema>\n\n// ---------------------------------------------------------------------------\n// OPENID CONNECT\nconst oasSecuritySchemeOpenId = commonProps.extend({\n  type: z.literal('openIdConnect'),\n  /**\n   * REQUIRED. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the\n   * form of a URL. The OpenID Connect standard requires the use of TLS.\n   */\n  openIdConnectUrl: z.string().optional().default(''),\n})\n\nexport const securityOpenIdSchema = oasSecuritySchemeOpenId.merge(extendedSecuritySchema)\nexport type SecuritySchemaOpenId = z.infer<typeof securityOpenIdSchema>\n\n// ---------------------------------------------------------------------------\n\n/**\n * REQUIRED. The authorization URL to be used for this flow. This MUST be in\n * the form of a URL. The OAuth2 standard requires the use of TLS.\n */\nconst authorizationUrl = z.string().default('')\n\n/**\n * REQUIRED. The token URL to be used for this flow. This MUST be in the\n * form of a URL. The OAuth2 standard requires the use of TLS.\n */\nconst tokenUrl = z.string().default('')\n\n/** Common properties used across all oauth2 flows */\nconst flowsCommon = z.object({\n  /**\n   * The URL to be used for obtaining refresh tokens. This MUST be in the form of a\n   * URL. The OAuth2 standard requires the use of TLS.\n   */\n  'refreshUrl': z.string().optional().default(''),\n  /**\n   * REQUIRED. The available scopes for the OAuth2 security scheme. A map\n   * between the scope name and a short description for it. The map MAY be empty.\n   */\n  'scopes': z.record(z.string(), z.string().optional().default('')).optional().default({}).catch({}),\n  'selectedScopes': z.array(z.string()).optional().default([]),\n  /** Extension to save the client Id associated with an oauth flow */\n  'x-scalar-client-id': z.string().optional().default(''),\n  /** The auth token */\n  'token': z.string().default(''),\n  /** Additional query parameters for the OAuth authorization request. Example: { prompt: 'consent', audience: 'scalar' }. */\n  'x-scalar-security-query': z.record(z.string(), z.string()).optional(),\n  /** Additional body parameters for the OAuth token request. Example: { audience: 'foo' }. */\n  'x-scalar-security-body': z.record(z.string(), z.string()).optional(),\n  /** Extension to specify custom token name in the response (defaults to 'access_token') */\n  'x-tokenName': z.string().optional(),\n})\n\n/** Setup a default redirect uri if we can */\nconst defaultRedirectUri = typeof window !== 'undefined' ? window.location.origin + window.location.pathname : ''\n\n/** Options for the x-usePkce extension */\nexport const pkceOptions = ['SHA-256', 'plain', 'no'] as const\n\nconst credentialsLocationExtension = z.enum(['header', 'body']).optional()\n\n/** Oauth2 security scheme */\nconst oasSecuritySchemeOauth2 = commonProps.extend({\n  type: z.literal('oauth2'),\n  /** The default scopes for the oauth flow */\n  'x-default-scopes': z.array(z.string()).optional(),\n  /** REQUIRED. An object containing configuration information for the flow types supported. */\n  flows: z\n    .object({\n      /** Configuration for the OAuth Implicit flow */\n      implicit: flowsCommon.extend({\n        'type': z.literal('implicit').default('implicit'),\n        authorizationUrl,\n        'x-scalar-redirect-uri': z.string().optional().default(defaultRedirectUri),\n      }),\n      /** Configuration for the OAuth Resource Owner Password flow */\n      password: flowsCommon.extend({\n        type: z.literal('password').default('password'),\n        tokenUrl,\n        clientSecret: z.string().default(''),\n        username: z.string().default(''),\n        password: z.string().default(''),\n        'x-scalar-credentials-location': credentialsLocationExtension,\n      }),\n      /** Configuration for the OAuth Client Credentials flow. Previously called application in OpenAPI 2.0. */\n      clientCredentials: flowsCommon.extend({\n        type: z.literal('clientCredentials').default('clientCredentials'),\n        tokenUrl,\n        clientSecret: z.string().default(''),\n        'x-scalar-credentials-location': credentialsLocationExtension,\n      }),\n      /** Configuration for the OAuth Authorization Code flow. Previously called accessCode in OpenAPI 2.0.*/\n      authorizationCode: flowsCommon.extend({\n        'type': z.literal('authorizationCode').default('authorizationCode'),\n        authorizationUrl,\n        'x-usePkce': z.enum(pkceOptions).optional().default('no'),\n        'x-scalar-redirect-uri': z.string().optional().default(defaultRedirectUri),\n        tokenUrl,\n        clientSecret: z.string().default(''),\n        'x-scalar-credentials-location': credentialsLocationExtension,\n      }),\n    })\n    .partial()\n    .default({\n      implicit: {\n        selectedScopes: [],\n        scopes: {},\n        'x-scalar-client-id': '',\n        refreshUrl: '',\n        token: '',\n        type: 'implicit',\n        authorizationUrl: 'http://localhost:8080',\n        'x-scalar-redirect-uri': defaultRedirectUri,\n      },\n    }),\n})\n\nexport const securityOauthSchema = oasSecuritySchemeOauth2.merge(extendedSecuritySchema)\n\nexport type SecuritySchemeOauth2 = z.infer<typeof securityOauthSchema>\nexport type SecuritySchemeOauth2Payload = z.input<typeof securityOauthSchema>\nexport type Oauth2Flow = NonNullable<\n  SecuritySchemeOauth2['flows']['authorizationCode' | 'clientCredentials' | 'implicit' | 'password']\n>\n/** Payload for the oauth 2 flows + extensions */\nexport type Oauth2FlowPayload = NonNullable<SecuritySchemeOauth2Payload['flows']>[\n  | 'authorizationCode'\n  | 'clientCredentials'\n  | 'implicit'\n  | 'password'] &\n  Record<`x-${string}`, string>\n\n// ---------------------------------------------------------------------------\n// Final Types\n\n/**\n * Security Requirement\n * Lists the required security schemes to execute this operation OR the whole collection/spec.\n * The name used for each property MUST correspond to a security scheme declared in the Security\n * Schemes under the Components Object.\n *\n * The key (name) here will be matched to the key of the securityScheme for linking\n *\n * @see https://spec.openapis.org/oas/latest.html#security-requirement-object\n */\nexport const oasSecurityRequirementSchema = z.record(z.string(), z.array(z.string()).optional().default([]))\n\n/** OAS Compliant security schemes */\nexport const oasSecuritySchemeSchema = z.union([\n  oasSecuritySchemeApiKey,\n  oasSecuritySchemeHttp,\n  oasSecuritySchemeOauth2,\n  oasSecuritySchemeOpenId,\n])\n\n/** Extended security schemes for workspace usage */\nexport const securitySchemeSchema = z\n  .discriminatedUnion('type', [securityApiKeySchema, securityHttpSchema, securityOpenIdSchema, securityOauthSchema])\n  .transform((data) => {\n    // Set selected scopes from x-default-scopes\n    if (data.type === 'oauth2' && data['x-default-scopes']?.length) {\n      const keys = Object.keys(data.flows) as Array<keyof typeof data.flows>\n      keys.forEach((key) => {\n        if (data.flows[key]?.selectedScopes && data['x-default-scopes']) {\n          data.flows[key].selectedScopes = [data['x-default-scopes']].flat()\n        }\n      })\n    }\n    return data\n  })\n\n/**\n * Security Scheme Object\n *\n * @see https://spec.openapis.org/oas/latest.html#security-scheme-object\n */\nexport type SecurityScheme = z.infer<typeof securitySchemeSchema>\nexport type SecuritySchemePayload = z.input<typeof securitySchemeSchema>\n"],
  "mappings": "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",
  "names": []
}
