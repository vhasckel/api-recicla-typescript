{
  "version": 3,
  "sources": ["../../../../src/schemas/3.1/unprocessed/header-object.ts"],
  "sourcesContent": ["import { z } from 'zod'\nimport { HeaderObjectSchema as OriginalHeaderObjectSchema } from '../processed/header-object'\nimport { ExampleObjectSchema } from './example-object'\nimport { MediaTypeObjectSchemaWithoutEncoding } from './media-type-object-without-encoding'\nimport { ReferenceObjectSchema } from './reference-object'\nimport { SchemaObjectSchema } from './schema-object'\n\n/**\n * Header Object\n *\n * Describes a single header for HTTP responses and for individual parts in multipart representations; see the relevant\n *  Response Object and Encoding Object documentation for restrictions on which headers can be described.\n *\n * The Header Object follows the structure of the Parameter Object, including determining its serialization strategy\n * based on whether schema or content is present, with the following changes:\n *\n * - name MUST NOT be specified, it is given in the corresponding headers map.\n * - in MUST NOT be specified, it is implicitly in header.\n * - All traits that are affected by the location MUST be applicable to a location of header (for example, style).\n *   This means that allowEmptyValue and allowReserved MUST NOT be used, and style, if used, MUST be limited to\n *   \"simple\".\n *\n * @see https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.1.md#header-object\n */\nexport const HeaderObjectSchema = OriginalHeaderObjectSchema.extend({\n  /**\n   * The schema defining the type used for the header.\n   */\n  schema: SchemaObjectSchema.optional(),\n  /**\n   * Examples of the parameter's potential value.\n   */\n  examples: z.record(z.string(), z.union([ReferenceObjectSchema, ExampleObjectSchema])).optional(),\n  /**\n   * A map containing the representations for the parameter.\n   * The key is the media type and the value describes it.\n   * Only one of content or schema should be specified.\n   */\n  content: z.record(z.string(), MediaTypeObjectSchemaWithoutEncoding).optional(),\n})\n"],
  "mappings": "AAAA,SAAS,SAAS;AAClB,SAAS,sBAAsB,kCAAkC;AACjE,SAAS,2BAA2B;AACpC,SAAS,4CAA4C;AACrD,SAAS,6BAA6B;AACtC,SAAS,0BAA0B;AAmB5B,MAAM,qBAAqB,2BAA2B,OAAO;AAAA;AAAA;AAAA;AAAA,EAIlE,QAAQ,mBAAmB,SAAS;AAAA;AAAA;AAAA;AAAA,EAIpC,UAAU,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,MAAM,CAAC,uBAAuB,mBAAmB,CAAC,CAAC,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM/F,SAAS,EAAE,OAAO,EAAE,OAAO,GAAG,oCAAoC,EAAE,SAAS;AAC/E,CAAC;",
  "names": []
}
