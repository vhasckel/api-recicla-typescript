{
  "version": 3,
  "sources": ["../src/openapi-types.test-d.ts"],
  "sourcesContent": ["import { describe, expectTypeOf, it } from 'vitest'\n\nimport type { OpenAPI, OpenAPIV2, OpenAPIV3, OpenAPIV3_1, OpenAPIV3_2 } from './openapi-types'\n\ndescribe('OpenAPI', () => {\n  it('has a generic type', () => {\n    const document: OpenAPI.Document = {\n      // anything\n    }\n\n    expectTypeOf(document).toEqualTypeOf<OpenAPI.Document>()\n  })\n\n  it('narrows it down to Swagger 2.0', () => {\n    const document: OpenAPI.Document = {\n      swagger: '2.0',\n    }\n\n    expectTypeOf(document).toEqualTypeOf<OpenAPIV2.Document>()\n  })\n\n  it('narrows it down to OpenAPI 3.0.0', () => {\n    const document: OpenAPI.Document = {\n      openapi: '3.0.0',\n    }\n\n    expectTypeOf(document).toEqualTypeOf<OpenAPIV3.Document>()\n  })\n\n  it('narrows it down to OpenAPI 3.0.4', () => {\n    const document: OpenAPI.Document = {\n      openapi: '3.0.4',\n    }\n\n    expectTypeOf(document).toEqualTypeOf<OpenAPIV3.Document>()\n  })\n\n  it('narrows it down to OpenAPI 3.1.0', () => {\n    const document: OpenAPI.Document = {\n      openapi: '3.1.0',\n    }\n\n    expectTypeOf(document).toEqualTypeOf<OpenAPIV3_1.Document>()\n  })\n\n  it('narrows it down to OpenAPI 3.1.1', () => {\n    const document: OpenAPI.Document = {\n      openapi: '3.1.1',\n    }\n\n    expectTypeOf(document).toEqualTypeOf<OpenAPIV3_1.Document>()\n  })\n\n  it('narrows it down to OpenAPI 3.1.2', () => {\n    const document: OpenAPI.Document = {\n      openapi: '3.1.2',\n    }\n\n    expectTypeOf(document).toEqualTypeOf<OpenAPIV3_1.Document>()\n  })\n\n  it('narrows it down to OpenAPI 3.2.0', () => {\n    const document: OpenAPI.Document = {\n      openapi: '3.2.0',\n    }\n\n    expectTypeOf(document).toEqualTypeOf<OpenAPIV3_2.Document>()\n  })\n\n  it('types a custom extension', () => {\n    const document: OpenAPI.Document<{\n      'x-custom'?: boolean\n      'random-attribute'?: any\n    }> = {}\n\n    expectTypeOf(document['random-attribute']).toEqualTypeOf<any>()\n    expectTypeOf(document['x-custom']).toEqualTypeOf<boolean | undefined>()\n  })\n\n  it('has a HttpMethod type', () => {\n    expectTypeOf('get' as OpenAPI.HttpMethod).toEqualTypeOf<OpenAPI.HttpMethod>()\n\n    // @ts-expect-error name is a string\n    assertType('NOT_A_METHOD' as OpenAPI.HttpMethod)\n  })\n})\n"],
  "mappings": "AAAA,SAAS,UAAU,cAAc,UAAU;AAI3C,SAAS,WAAW,MAAM;AACxB,KAAG,sBAAsB,MAAM;AAC7B,UAAM,WAA6B;AAAA;AAAA,IAEnC;AAEA,iBAAa,QAAQ,EAAE,cAAgC;AAAA,EACzD,CAAC;AAED,KAAG,kCAAkC,MAAM;AACzC,UAAM,WAA6B;AAAA,MACjC,SAAS;AAAA,IACX;AAEA,iBAAa,QAAQ,EAAE,cAAkC;AAAA,EAC3D,CAAC;AAED,KAAG,oCAAoC,MAAM;AAC3C,UAAM,WAA6B;AAAA,MACjC,SAAS;AAAA,IACX;AAEA,iBAAa,QAAQ,EAAE,cAAkC;AAAA,EAC3D,CAAC;AAED,KAAG,oCAAoC,MAAM;AAC3C,UAAM,WAA6B;AAAA,MACjC,SAAS;AAAA,IACX;AAEA,iBAAa,QAAQ,EAAE,cAAkC;AAAA,EAC3D,CAAC;AAED,KAAG,oCAAoC,MAAM;AAC3C,UAAM,WAA6B;AAAA,MACjC,SAAS;AAAA,IACX;AAEA,iBAAa,QAAQ,EAAE,cAAoC;AAAA,EAC7D,CAAC;AAED,KAAG,oCAAoC,MAAM;AAC3C,UAAM,WAA6B;AAAA,MACjC,SAAS;AAAA,IACX;AAEA,iBAAa,QAAQ,EAAE,cAAoC;AAAA,EAC7D,CAAC;AAED,KAAG,oCAAoC,MAAM;AAC3C,UAAM,WAA6B;AAAA,MACjC,SAAS;AAAA,IACX;AAEA,iBAAa,QAAQ,EAAE,cAAoC;AAAA,EAC7D,CAAC;AAED,KAAG,oCAAoC,MAAM;AAC3C,UAAM,WAA6B;AAAA,MACjC,SAAS;AAAA,IACX;AAEA,iBAAa,QAAQ,EAAE,cAAoC;AAAA,EAC7D,CAAC;AAED,KAAG,4BAA4B,MAAM;AACnC,UAAM,WAGD,CAAC;AAEN,iBAAa,SAAS,kBAAkB,CAAC,EAAE,cAAmB;AAC9D,iBAAa,SAAS,UAAU,CAAC,EAAE,cAAmC;AAAA,EACxE,CAAC;AAED,KAAG,yBAAyB,MAAM;AAChC,iBAAa,KAA2B,EAAE,cAAkC;AAG5E,eAAW,cAAoC;AAAA,EACjD,CAAC;AACH,CAAC;",
  "names": []
}
