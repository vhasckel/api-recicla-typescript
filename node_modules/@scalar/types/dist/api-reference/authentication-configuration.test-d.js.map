{
  "version": 3,
  "sources": ["../../src/api-reference/authentication-configuration.test-d.ts"],
  "sourcesContent": ["import { assertType, describe, it } from 'vitest'\nimport type { AuthenticationConfiguration } from './authentication-configuration'\n\ndescribe('ApiReferenceConfiguration', () => {\n  it('ensure we are generating correct types for preferredSecurityScheme', () => {\n    assertType<AuthenticationConfiguration>({ preferredSecurityScheme: 'apiKey' })\n    assertType<AuthenticationConfiguration>({ preferredSecurityScheme: ['apiKey', 'bearerAuth'] })\n    assertType<AuthenticationConfiguration>({\n      preferredSecurityScheme: ['apiKey', ['basic', 'oauth2'], ['apiKey', 'bearerAuth', 'oauth2']],\n    })\n    assertType<AuthenticationConfiguration>({\n      // @ts-expect-error incorrect type\n      preferredSecurityScheme: 47,\n    })\n    assertType<AuthenticationConfiguration>({\n      // @ts-expect-error incorrect type\n      preferredSecurityScheme: [22, null],\n    })\n  })\n\n  it('ensure we are generating correct types for securitySchemes', () => {\n    assertType<AuthenticationConfiguration>({\n      securitySchemes: {\n        apiKey: { type: 'apiKey', name: 'api_key', in: 'header' },\n      },\n    })\n    assertType<AuthenticationConfiguration>({\n      securitySchemes: {\n        bearerAuth: { type: 'http', scheme: 'bearer', bearerFormat: 'JWT' },\n      },\n    })\n    assertType<AuthenticationConfiguration>({\n      securitySchemes: {\n        oauth2: {\n          type: 'oauth2',\n          flows: {\n            implicit: { scopes: { 'read:items': 'Read access to items' } },\n            password: {\n              username: 'username',\n              password: 'password',\n            },\n          },\n        },\n      },\n    })\n  })\n})\n"],
  "mappings": "AAAA,SAAS,YAAY,UAAU,UAAU;AAGzC,SAAS,6BAA6B,MAAM;AAC1C,KAAG,sEAAsE,MAAM;AAC7E,eAAwC,EAAE,yBAAyB,SAAS,CAAC;AAC7E,eAAwC,EAAE,yBAAyB,CAAC,UAAU,YAAY,EAAE,CAAC;AAC7F,eAAwC;AAAA,MACtC,yBAAyB,CAAC,UAAU,CAAC,SAAS,QAAQ,GAAG,CAAC,UAAU,cAAc,QAAQ,CAAC;AAAA,IAC7F,CAAC;AACD,eAAwC;AAAA;AAAA,MAEtC,yBAAyB;AAAA,IAC3B,CAAC;AACD,eAAwC;AAAA;AAAA,MAEtC,yBAAyB,CAAC,IAAI,IAAI;AAAA,IACpC,CAAC;AAAA,EACH,CAAC;AAED,KAAG,8DAA8D,MAAM;AACrE,eAAwC;AAAA,MACtC,iBAAiB;AAAA,QACf,QAAQ,EAAE,MAAM,UAAU,MAAM,WAAW,IAAI,SAAS;AAAA,MAC1D;AAAA,IACF,CAAC;AACD,eAAwC;AAAA,MACtC,iBAAiB;AAAA,QACf,YAAY,EAAE,MAAM,QAAQ,QAAQ,UAAU,cAAc,MAAM;AAAA,MACpE;AAAA,IACF,CAAC;AACD,eAAwC;AAAA,MACtC,iBAAiB;AAAA,QACf,QAAQ;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,YACL,UAAU,EAAE,QAAQ,EAAE,cAAc,uBAAuB,EAAE;AAAA,YAC7D,UAAU;AAAA,cACR,UAAU;AAAA,cACV,UAAU;AAAA,YACZ;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACH,CAAC;",
  "names": []
}
