{
  "version": 3,
  "sources": ["../../../../src/schemas/3.1/unprocessed/path-item-object.ts"],
  "sourcesContent": ["import { z } from 'zod'\nimport { BasePathItemObjectSchema } from './base-path-item-object'\nimport { OperationObjectSchema } from './operation-object'\n\n/**\n * Path Item Object\n *\n * Describes the operations available on a single path. A Path Item MAY be empty, due to ACL constraints. The path\n * itself is still exposed to the documentation viewer but they will not know which operations and parameters are\n * available.\n *\n * @see https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.1.md#path-item-object\n */\nexport const PathItemObjectSchema = BasePathItemObjectSchema.extend({\n  /**\n   * Allows for a referenced definition of this path item. The value MUST be in the form of a URI, and the referenced\n   * structure MUST be in the form of a Path Item Object. In case a Path Item Object field appears both in the defined\n   * object and the referenced object, the behavior is undefined. See the rules for resolving Relative References.\n   *\n   * Note: The behavior of $ref with adjacent properties is likely to change in future versions of this specification to\n   * bring it into closer alignment with the behavior of the Reference Object.\n   *\n   * Q: Why don't we just use `ReferenceObjectSchema`?\n   * A: References work a little bit different here. It's the only place where they can be combined with other\n   *    properties.\n   */\n  '$ref': z.string().optional(),\n  /**\n   * A definition of a GET operation on this path.\n   */\n  get: OperationObjectSchema.optional(),\n  /**\n   * A definition of a PUT operation on this path.\n   */\n  put: OperationObjectSchema.optional(),\n  /**\n   * A definition of a POST operation on this path.\n   */\n  post: OperationObjectSchema.optional(),\n  /**\n   * A definition of a DELETE operation on this path.\n   */\n  delete: OperationObjectSchema.optional(),\n  /**\n   * A definition of a OPTIONS operation on this path.\n   */\n  options: OperationObjectSchema.optional(),\n  /**\n   * A definition of a HEAD operation on this path.\n   */\n  head: OperationObjectSchema.optional(),\n  /**\n   * A definition of a PATCH operation on this path.\n   */\n  patch: OperationObjectSchema.optional(),\n  /**\n   * A definition of a TRACE operation on this path.\n   */\n  trace: OperationObjectSchema.optional(),\n})\n"],
  "mappings": "AAAA,SAAS,SAAS;AAClB,SAAS,gCAAgC;AACzC,SAAS,6BAA6B;AAW/B,MAAM,uBAAuB,yBAAyB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAalE,QAAQ,EAAE,OAAO,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA,EAI5B,KAAK,sBAAsB,SAAS;AAAA;AAAA;AAAA;AAAA,EAIpC,KAAK,sBAAsB,SAAS;AAAA;AAAA;AAAA;AAAA,EAIpC,MAAM,sBAAsB,SAAS;AAAA;AAAA;AAAA;AAAA,EAIrC,QAAQ,sBAAsB,SAAS;AAAA;AAAA;AAAA;AAAA,EAIvC,SAAS,sBAAsB,SAAS;AAAA;AAAA;AAAA;AAAA,EAIxC,MAAM,sBAAsB,SAAS;AAAA;AAAA;AAAA;AAAA,EAIrC,OAAO,sBAAsB,SAAS;AAAA;AAAA;AAAA;AAAA,EAItC,OAAO,sBAAsB,SAAS;AACxC,CAAC;",
  "names": []
}
