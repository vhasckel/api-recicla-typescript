{
  "version": 3,
  "sources": ["../../../../src/schemas/3.1/unprocessed/schema-object.ts"],
  "sourcesContent": ["import { z } from 'zod'\n\nimport { SchemaObjectSchema as OriginalSchemaObjectSchema } from '../processed/schema-object'\nimport { ReferenceObjectSchema } from './reference-object'\n\n/**\n * The Schema Object with reference fields.\n * This extends the base Schema Object to include reference-related fields\n * that are processed differently in the unprocessed schema.\n */\nexport const SchemaObjectSchema: z.ZodType<any> = z.lazy(() =>\n  z.intersection(\n    OriginalSchemaObjectSchema,\n    z.object({\n      // Reference-related fields\n      $ref: z.string().optional(),\n      $id: z.string().optional(),\n      $schema: z.string().optional(),\n      $defs: z\n        .record(\n          z.string(),\n          z.lazy(() => SchemaObjectSchema),\n        )\n        .optional(),\n      $dynamicRef: z.string().optional(),\n      $dynamicAnchor: z.string().optional(),\n\n      // Override the recursive fields to use this schema instead of the original\n      properties: z.record(z.string(), z.union([z.lazy(() => SchemaObjectSchema), ReferenceObjectSchema])).optional(),\n      additionalProperties: z.union([z.boolean(), z.lazy(() => SchemaObjectSchema), ReferenceObjectSchema]).optional(),\n      patternProperties: z\n        .record(z.string(), z.union([z.lazy(() => SchemaObjectSchema), ReferenceObjectSchema]))\n        .optional(),\n      items: z.union([z.lazy(() => SchemaObjectSchema), ReferenceObjectSchema]).optional(),\n      prefixItems: z.array(z.union([z.lazy(() => SchemaObjectSchema), ReferenceObjectSchema])).optional(),\n      allOf: z.array(z.union([z.lazy(() => SchemaObjectSchema), ReferenceObjectSchema])).optional(),\n      oneOf: z.array(z.union([z.lazy(() => SchemaObjectSchema), ReferenceObjectSchema])).optional(),\n      anyOf: z.array(z.union([z.lazy(() => SchemaObjectSchema), ReferenceObjectSchema])).optional(),\n      not: z.union([z.lazy(() => SchemaObjectSchema), ReferenceObjectSchema]).optional(),\n    }),\n  ),\n)\n"],
  "mappings": "AAAA,SAAS,SAAS;AAElB,SAAS,sBAAsB,kCAAkC;AACjE,SAAS,6BAA6B;AAO/B,MAAM,qBAAqC,EAAE;AAAA,EAAK,MACvD,EAAE;AAAA,IACA;AAAA,IACA,EAAE,OAAO;AAAA;AAAA,MAEP,MAAM,EAAE,OAAO,EAAE,SAAS;AAAA,MAC1B,KAAK,EAAE,OAAO,EAAE,SAAS;AAAA,MACzB,SAAS,EAAE,OAAO,EAAE,SAAS;AAAA,MAC7B,OAAO,EACJ;AAAA,QACC,EAAE,OAAO;AAAA,QACT,EAAE,KAAK,MAAM,kBAAkB;AAAA,MACjC,EACC,SAAS;AAAA,MACZ,aAAa,EAAE,OAAO,EAAE,SAAS;AAAA,MACjC,gBAAgB,EAAE,OAAO,EAAE,SAAS;AAAA;AAAA,MAGpC,YAAY,EAAE,OAAO,EAAE,OAAO,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,CAAC,EAAE,SAAS;AAAA,MAC9G,sBAAsB,EAAE,MAAM,CAAC,EAAE,QAAQ,GAAG,EAAE,KAAK,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,EAAE,SAAS;AAAA,MAC/G,mBAAmB,EAChB,OAAO,EAAE,OAAO,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,CAAC,EACrF,SAAS;AAAA,MACZ,OAAO,EAAE,MAAM,CAAC,EAAE,KAAK,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,EAAE,SAAS;AAAA,MACnF,aAAa,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,KAAK,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,CAAC,EAAE,SAAS;AAAA,MAClG,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,KAAK,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,CAAC,EAAE,SAAS;AAAA,MAC5F,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,KAAK,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,CAAC,EAAE,SAAS;AAAA,MAC5F,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,KAAK,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,CAAC,EAAE,SAAS;AAAA,MAC5F,KAAK,EAAE,MAAM,CAAC,EAAE,KAAK,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,EAAE,SAAS;AAAA,IACnF,CAAC;AAAA,EACH;AACF;",
  "names": []
}
