{
  "version": 3,
  "sources": ["../../src/legacy/reference-config.ts"],
  "sourcesContent": ["import type { OpenAPI, OpenAPIV2, OpenAPIV3, OpenAPIV3_1 } from '@scalar/openapi-types'\n\nimport type { ApiReferenceConfiguration } from '../api-reference/index'\nimport type { TargetId } from '../snippetz/index'\n\n/**\n * This re-export is needed due to a typescript issue\n * @see https://github.com/microsoft/TypeScript/issues/42873\n */\nexport type {\n  OpenAPI,\n  OpenAPIV2,\n  OpenAPIV3,\n  OpenAPIV3_1,\n} from '@scalar/openapi-types'\n\nexport type ClientInfo = {\n  key: string\n  title: string\n  link: string\n  description: string\n}\n\n/**\n * Alias for the OpenAPI 3.1 ServerObject type\n *\n * @deprecated Use OpenAPIV3_1.ServerObject instead\n */\nexport type Server = OpenAPIV3_1.ServerObject\n\nexport type TargetInfo = {\n  key: TargetId\n  title: string\n  extname: `.${string}` | null\n  default: string\n}\n\nexport type HiddenClients =\n  // Just hide all\n  | true\n  // Exclude whole targets or just specific clients\n  | Partial<Record<TargetInfo['key'], boolean | ClientInfo['key'][]>>\n  // Backwards compatibility with the previous behavior ['fetch', 'xhr']\n  | ClientInfo['key'][]\n\nexport type PathRouting = {\n  basePath: string\n}\n\n/**\n * @deprecated Use ApiReferenceConfiguration instead\n *\n * @example import type { ApiReferenceConfiguration } from '@scalar/types/api-reference'\n */\nexport type ReferenceConfiguration = Partial<ApiReferenceConfiguration>\n\nexport type BaseParameter = {\n  name: string\n  description?: string | null\n  value: string | number | Record<string, any>\n  required?: boolean\n  enabled: boolean\n}\n\ntype OptionalCharset = string | null\n\nexport type ContentType =\n  | `application/json${OptionalCharset}`\n  | `application/xml${OptionalCharset}`\n  | `text/plain${OptionalCharset}`\n  | `text/html${OptionalCharset}`\n  | `application/octet-stream${OptionalCharset}`\n  | `application/x-www-form-urlencoded${OptionalCharset}`\n  | `multipart/form-data${OptionalCharset}`\n  | `*/*${OptionalCharset}`\n  | `application/vnd.${string}+json${OptionalCharset}`\n\nexport type Cookie = {\n  name: string\n  value: string\n}\n\nexport type CustomRequestExample = {\n  lang: string\n  label: string\n  source: string\n}\n\nexport type Header = {\n  name: string\n  value: string\n}\n\nexport enum XScalarStability {\n  Deprecated = 'deprecated',\n  Experimental = 'experimental',\n  Stable = 'stable',\n}\n\nexport type Operation = {\n  id: string\n  httpVerb: OpenAPIV3_1.HttpMethods\n  path: string\n  name: string\n  isWebhook: boolean\n  description?: string\n  information: OpenAPIV3_1.OperationObject\n  servers?: OpenAPIV3_1.ServerObject[]\n  pathParameters?: OpenAPIV3_1.ParameterObject[]\n}\n\n/**\n * @deprecated Use Parameter instead\n */\nexport type Parameters = Parameter\n\nexport type Parameter = {\n  // Fixed Fields\n  name: string\n  in?: string\n  description?: string\n  required?: boolean\n  deprecated?: boolean\n  allowEmptyValue?: boolean\n  // Other\n  style?: 'form' | 'simple'\n  explode?: boolean\n  allowReserved?: boolean\n  schema?: Schema\n  example?: any\n  examples?: Map<string, any>\n  content?: RequestBodyMimeTypes\n  headers?: { [key: string]: OpenAPI.HeaderObject }\n}\n\nexport type Query = {\n  name: string\n  value: string\n}\n\n// Create a mapped type to ensure keys are a subset of ContentType\nexport type RequestBodyMimeTypes = {\n  [K in ContentType]?: {\n    schema?: any\n    example?: any\n    examples?: any\n  }\n}\n\nexport type RequestBody = {\n  description?: string\n  required?: boolean\n  content?: RequestBodyMimeTypes\n}\n\nexport type Schema = {\n  type: string\n  name?: string\n  example?: any\n  default?: any\n  format?: string\n  description?: string\n  properties?: Record<string, Schema>\n}\n\n/**\n * This is a very strange and custom way to represent the operation object.\n * It's the outcome of the `parse` helper.\n *\n * @deprecated This is evil. Stop using it. We'll transition to use the new store.\n */\nexport type TransformedOperation = Operation & {\n  pathParameters?: Parameter[]\n}\n\nexport type CollapsedSidebarItems = Record<string, boolean>\n\nexport type AuthenticationState = {\n  customSecurity?: boolean\n  /** You can pre-select a single security scheme, multiple, or complex security using an array of arrays */\n  preferredSecurityScheme?: string | (string | string[])[] | null\n  securitySchemes?:\n    | OpenAPIV2.SecurityDefinitionsObject\n    | OpenAPIV3.ComponentsObject['securitySchemes']\n    | OpenAPIV3_1.ComponentsObject['securitySchemes']\n  http?: {\n    basic?: {\n      username?: string\n      password?: string\n    }\n    bearer?: {\n      token?: string\n    }\n  }\n  apiKey?: {\n    token?: string\n  }\n  oAuth2?: {\n    clientId?: string\n    scopes?: string[]\n    accessToken?: string\n    state?: string\n    username?: string\n    password?: string\n  }\n}\n\nexport type Heading = {\n  depth: number\n  value: string\n  slug?: string\n}\n\nexport type CodeBlockSSRKey = `components-scalar-code-block${number}`\nexport type DescriptionSectionSSRKey = `components-Content-Introduction-Description-sections${number}`\n\nexport type ScalarState = {\n  'hash'?: string\n  'useGlobalStore-authentication'?: AuthenticationState\n  'useSidebarContent-collapsedSidebarItems'?: CollapsedSidebarItems\n  [key: CodeBlockSSRKey]: string\n  [key: DescriptionSectionSSRKey]: {\n    heading: Heading\n    content: string\n  }[]\n}\n\nexport type Tag = {\n  'name': string\n  'description': string\n  'operations': TransformedOperation[]\n  'x-displayName'?: string\n  'externalDocs'?: OpenAPIV3_1.ExternalDocumentationObject\n}\n\nexport type TagGroup = {\n  name: string\n  tags: string[]\n}\n\nexport type Definitions = OpenAPIV2.DefinitionsObject\n\n/**\n * Webhook (after our super custom transformation process)\n *\n * @deprecated Let's get rid of those super custom transformed entities and use the store instead.\n */\nexport type Webhooks = Record<\n  string,\n  Record<\n    OpenAPIV3_1.HttpMethods,\n    TransformedOperation & {\n      'x-internal'?: boolean\n    }\n  >\n>\n\n/**\n * The native OpenAPI Webhook object, but with the x-internal and x-scalar-ignore properties\n */\nexport type Webhook = (OpenAPIV3.OperationObject | OpenAPIV3_1.OperationObject) & {\n  'x-internal'?: boolean\n  'x-scalar-ignore'?: boolean\n}\n\n/**\n * @deprecated Use `@scalar/openapi-types` instead\n */\nexport type Spec = {\n  'tags'?: Tag[]\n  'info':\n    | Partial<OpenAPIV2.Document['info']>\n    | Partial<OpenAPIV3.Document['info']>\n    | Partial<OpenAPIV3_1.Document['info']>\n  'host'?: OpenAPIV2.Document['host']\n  'basePath'?: OpenAPIV2.Document['basePath']\n  'schemes'?: OpenAPIV2.Document['schemes']\n  'externalDocs'?: {\n    url: string\n    description?: string\n  }\n  'servers'?: OpenAPIV3.Document['servers'] | OpenAPIV3_1.Document['servers']\n  'components'?: OpenAPIV3.ComponentsObject | OpenAPIV3_1.ComponentsObject\n  'webhooks'?: TransformedOperation[]\n  'definitions'?: Definitions\n  'swagger'?: OpenAPIV2.Document['swagger']\n  'openapi'?: OpenAPIV3.Document['openapi'] | OpenAPIV3_1.Document['openapi']\n  'x-tagGroups'?: TagGroup[]\n  'security'?: OpenAPIV3.SecurityRequirementObject[]\n}\n"],
  "mappings": "AA6FO,IAAK,mBAAL,kBAAKA,sBAAL;AACL,EAAAA,kBAAA,gBAAa;AACb,EAAAA,kBAAA,kBAAe;AACf,EAAAA,kBAAA,YAAS;AAHC,SAAAA;AAAA,GAAA;",
  "names": ["XScalarStability"]
}
