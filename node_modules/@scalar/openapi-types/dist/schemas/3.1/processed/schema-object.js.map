{
  "version": 3,
  "sources": ["../../../../src/schemas/3.1/processed/schema-object.ts"],
  "sourcesContent": ["import { z } from 'zod'\n\nimport { DiscriminatorObjectSchema } from './discriminator-object'\nimport { ExternalDocumentationObjectSchema } from './external-documentation-object'\nimport { XmlObjectSchema } from './xml-object'\n\n/**\n * The Schema Object allows the definition of input and output data types.\n * These types can be objects, but also primitives and arrays.\n */\nexport const SchemaObjectSchema: z.ZodType<Record<string, any>> = z.object({\n  // Standard JSON Schema fields\n  title: z.string().optional(),\n  description: z.string().optional(),\n  default: z.any().optional(),\n  examples: z.array(z.any()).optional(),\n  multipleOf: z.number().optional(),\n  maximum: z.number().optional(),\n  exclusiveMaximum: z.union([z.boolean(), z.number()]).optional(),\n  minimum: z.number().optional(),\n  exclusiveMinimum: z.union([z.boolean(), z.number()]).optional(),\n  maxLength: z.number().int().optional(),\n  minLength: z.number().int().optional(),\n  pattern: z.string().optional(),\n  maxItems: z.number().int().optional(),\n  minItems: z.number().int().optional(),\n  uniqueItems: z.boolean().optional(),\n  maxProperties: z.number().int().optional(),\n  minProperties: z.number().int().optional(),\n  required: z.array(z.string()).optional(),\n  enum: z.array(z.any()).optional(),\n  type: z\n    .union([\n      z.literal('array'),\n      z.literal('boolean'),\n      z.literal('integer'),\n      z.literal('number'),\n      z.literal('object'),\n      z.literal('string'),\n      z.literal('null'),\n      z.array(\n        z.union([\n          z.literal('array'),\n          z.literal('boolean'),\n          z.literal('integer'),\n          z.literal('number'),\n          z.literal('object'),\n          z.literal('string'),\n          z.literal('null'),\n        ]),\n      ),\n    ])\n    .optional(),\n\n  // JSON Schema fields\n  $ref: z.string().optional(),\n  $id: z.string().optional(),\n  $schema: z.string().optional(),\n  $defs: z\n    .record(\n      z.string(),\n      z.lazy(() => SchemaObjectSchema),\n    )\n    .optional(),\n  const: z.any().optional(),\n  $dynamicRef: z.string().optional(),\n  $dynamicAnchor: z.string().optional(),\n\n  // OpenAPI specific fields\n  format: z.string().optional(),\n  contentMediaType: z.string().optional(),\n  contentEncoding: z.string().optional(),\n  contentSchema: z.lazy(() => SchemaObjectSchema).optional(),\n  deprecated: z.boolean().optional(),\n  readOnly: z.boolean().optional(),\n  writeOnly: z.boolean().optional(),\n  example: z.any().optional(),\n\n  // Object-related fields\n  properties: z\n    .record(\n      z.string(),\n      z.lazy(() => SchemaObjectSchema),\n    )\n    .optional(),\n  additionalProperties: z.union([z.boolean(), z.lazy(() => SchemaObjectSchema)]).optional(),\n  patternProperties: z\n    .record(\n      z.string(),\n      z.lazy(() => SchemaObjectSchema),\n    )\n    .optional(),\n\n  // Array-related fields\n  items: z.lazy(() => SchemaObjectSchema).optional(),\n  prefixItems: z.array(z.lazy(() => SchemaObjectSchema)).optional(),\n\n  // Composition-related fields\n  allOf: z.array(z.lazy(() => SchemaObjectSchema)).optional(),\n  oneOf: z.array(z.lazy(() => SchemaObjectSchema)).optional(),\n  anyOf: z.array(z.lazy(() => SchemaObjectSchema)).optional(),\n  not: z.lazy(() => SchemaObjectSchema).optional(),\n\n  // Discriminator (only valid with oneOf, anyOf, or allOf)\n  discriminator: DiscriminatorObjectSchema.optional(),\n\n  // Additional metadata\n  externalDocs: ExternalDocumentationObjectSchema.optional(),\n  xml: XmlObjectSchema.optional(),\n})\n\nexport type SchemaObject = z.infer<typeof SchemaObjectSchema>\n"],
  "mappings": "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",
  "names": []
}
