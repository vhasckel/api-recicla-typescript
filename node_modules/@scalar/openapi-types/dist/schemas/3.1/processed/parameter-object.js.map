{
  "version": 3,
  "sources": ["../../../../src/schemas/3.1/processed/parameter-object.ts"],
  "sourcesContent": ["import { z } from 'zod'\nimport { ExampleObjectSchema } from './example-object'\nimport { MediaTypeObjectSchema } from './media-type-object'\nimport { SchemaObjectSchema } from './schema-object'\n\n/**\n * Parameter Object\n *\n * Describes a single operation parameter.\n *\n * A unique parameter is defined by a combination of a name and location.\n *\n * @see https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.1.md#parameter-object\n */\nexport const ParameterObjectSchema = z.object({\n  /**\n   * REQUIRED. The name of the parameter. Parameter names are case sensitive.\n   *\n   * - If in is \"path\", the name field MUST correspond to a template expression occurring within the path field in the\n   *   Paths Object. See Path Templating for further information.\n   * - If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition\n   *   SHALL be ignored.\n   * - For all other cases, the name corresponds to the parameter name used by the in property.\n   **/\n  name: z.string(),\n  /**\n   * REQUIRED. The location of the parameter. Possible values are \"query\", \"header\", \"path\" or \"cookie\".\n   **/\n  in: z.enum(['query', 'header', 'path', 'cookie']),\n  /**\n   * A brief description of the parameter. This could contain examples of use. CommonMark syntax MAY be used for rich\n   * text representation.\n   **/\n  description: z.string().optional(),\n  /**\n   * Determines whether this parameter is mandatory. If the parameter location is \"path\", this property is REQUIRED and\n   * its value MUST be true. Otherwise, the property MAY be included and its default value is false.\n   **/\n  required: z.boolean().optional(),\n  /**\n   * Specifies that a parameter is deprecated and SHOULD be transitioned out of usage. Default value is false.\n   **/\n  deprecated: z.boolean().optional(),\n  /**\n   * Sets the ability to pass empty-valued parameters. This is valid only for query parameters and allows sending a\n   * parameter with an empty value. Default value is false. If style is used, and if behavior is n/a (cannot be\n   * serialized), the value of allowEmptyValue SHALL be ignored. Use of this property is NOT RECOMMENDED, as it is\n   * likely to be removed in a later revision.\n   **/\n  allowEmptyValue: z.boolean().optional(),\n  /**\n   * Describes how the parameter value will be serialized depending on the type of the parameter value. Default values\n   * (based on value of in): for query - form; for path - simple; for header - simple; for cookie - form.\n   **/\n  style: z.enum(['matrix', 'label', 'form', 'simple', 'spaceDelimited', 'pipeDelimited', 'deepObject']).optional(),\n  /**\n   * When this is true, parameter values of type array or object generate separate parameters for each value of the\n   * array or key-value pair of the map. For other types of parameters this property has no effect. When style is form,\n   * the default value is true. For all other styles, the default value is false. */\n  explode: z.boolean().optional(),\n  /**\n   * Determines whether the parameter value SHOULD allow reserved characters, as defined by RFC3986 :/?#[]@!$&'()*+,;=\n   * to be included without percent-encoding. This property only applies to parameters with an in value of query.\n   * The default value is false.\n   **/\n  allowReserved: z.boolean().optional(),\n  /**\n   * The schema defining the type used for the parameter.\n   **/\n  schema: SchemaObjectSchema.optional(),\n  /**\n   * Example of the parameter's potential value. The example SHOULD match the specified schema and encoding properties\n   * if present. The example field is mutually exclusive of the examples field. Furthermore, if referencing a schema\n   * that contains an example, the example value SHALL override the example provided by the schema. To represent\n   * examples of media types that cannot naturally be represented in JSON or YAML, a string value can contain the\n   * example with escaping where necessary.\n   **/\n  example: z.any().optional(),\n  /**\n   * Examples of the parameter's potential value. Each example SHOULD contain a value in the correct format as\n   * specified in the parameter encoding. The examples field is mutually exclusive of the example field. Furthermore,\n   * if referencing a schema that contains an example, the examples value SHALL override the example provided by the\n   * schema.\n   **/\n  examples: z.record(z.string(), ExampleObjectSchema).optional(),\n  /**\n   * A map containing the representations for the parameter. The key is the media type and the value describes it.\n   * The map MUST only contain one entry.\n   **/\n  content: z.record(z.string(), MediaTypeObjectSchema).optional(),\n})\n"],
  "mappings": "AAAA,SAAS,SAAS;AAClB,SAAS,2BAA2B;AACpC,SAAS,6BAA6B;AACtC,SAAS,0BAA0B;AAW5B,MAAM,wBAAwB,EAAE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAU5C,MAAM,EAAE,OAAO;AAAA;AAAA;AAAA;AAAA,EAIf,IAAI,EAAE,KAAK,CAAC,SAAS,UAAU,QAAQ,QAAQ,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKhD,aAAa,EAAE,OAAO,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,EAKjC,UAAU,EAAE,QAAQ,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA,EAI/B,YAAY,EAAE,QAAQ,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOjC,iBAAiB,EAAE,QAAQ,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,EAKtC,OAAO,EAAE,KAAK,CAAC,UAAU,SAAS,QAAQ,UAAU,kBAAkB,iBAAiB,YAAY,CAAC,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,EAK/G,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM9B,eAAe,EAAE,QAAQ,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA,EAIpC,QAAQ,mBAAmB,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQpC,SAAS,EAAE,IAAI,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO1B,UAAU,EAAE,OAAO,EAAE,OAAO,GAAG,mBAAmB,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,EAK7D,SAAS,EAAE,OAAO,EAAE,OAAO,GAAG,qBAAqB,EAAE,SAAS;AAChE,CAAC;",
  "names": []
}
