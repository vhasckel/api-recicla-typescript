{
  "version": 3,
  "sources": ["../../../../src/schemas/3.1/processed/header-object.ts"],
  "sourcesContent": ["import { z } from 'zod'\nimport { ExampleObjectSchema } from './example-object'\nimport { MediaTypeObjectSchemaWithoutEncoding } from './media-type-object-without-encoding'\nimport { SchemaObjectSchema } from './schema-object'\n\n/**\n * Header Object\n *\n * Describes a single header for HTTP responses and for individual parts in multipart representations; see the relevant\n *  Response Object and Encoding Object documentation for restrictions on which headers can be described.\n *\n * The Header Object follows the structure of the Parameter Object, including determining its serialization strategy\n * based on whether schema or content is present, with the following changes:\n *\n * - name MUST NOT be specified, it is given in the corresponding headers map.\n * - in MUST NOT be specified, it is implicitly in header.\n * - All traits that are affected by the location MUST be applicable to a location of header (for example, style).\n *   This means that allowEmptyValue and allowReserved MUST NOT be used, and style, if used, MUST be limited to\n *   \"simple\".\n *\n * @see https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.1.md#header-object\n */\nexport const HeaderObjectSchema = z.object({\n  /**\n   * A brief description of the header. This could contain examples of use. CommonMark syntax MAY be used for rich text\n   * representation.\n   */\n  description: z.string().optional(),\n  /**\n   * Determines whether this header is mandatory. The default value is false.\n   */\n  required: z.boolean().optional(),\n  /**\n   * Specifies that the header is deprecated and SHOULD be transitioned out of usage. Default value is false.\n   */\n  deprecated: z.boolean().optional(),\n  /**\n   * Describes how the parameter value will be serialized. Only \"simple\" is allowed for headers.\n   */\n  style: z.enum(['matrix', 'label', 'simple', 'form', 'spaceDelimited', 'pipeDelimited', 'deepObject']).optional(),\n  /**\n   * When this is true, parameter values of type array or object generate separate parameters\n   * for each value of the array or key-value pair of the map.\n   */\n  explode: z.boolean().optional(),\n  /**\n   * The schema defining the type used for the header.\n   */\n  schema: SchemaObjectSchema.optional(),\n  /**\n   * Example of the parameter's potential value.\n   */\n  example: z.any().optional(),\n  /**\n   * Examples of the parameter's potential value.\n   */\n  examples: z.record(z.string(), ExampleObjectSchema).optional(),\n  /**\n   * A map containing the representations for the parameter.\n   * The key is the media type and the value describes it.\n   * Only one of content or schema should be specified.\n   */\n  content: z.record(z.string(), MediaTypeObjectSchemaWithoutEncoding).optional(),\n})\n"],
  "mappings": "AAAA,SAAS,SAAS;AAClB,SAAS,2BAA2B;AACpC,SAAS,4CAA4C;AACrD,SAAS,0BAA0B;AAmB5B,MAAM,qBAAqB,EAAE,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAKzC,aAAa,EAAE,OAAO,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA,EAIjC,UAAU,EAAE,QAAQ,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA,EAI/B,YAAY,EAAE,QAAQ,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA,EAIjC,OAAO,EAAE,KAAK,CAAC,UAAU,SAAS,UAAU,QAAQ,kBAAkB,iBAAiB,YAAY,CAAC,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,EAK/G,SAAS,EAAE,QAAQ,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA,EAI9B,QAAQ,mBAAmB,SAAS;AAAA;AAAA;AAAA;AAAA,EAIpC,SAAS,EAAE,IAAI,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA,EAI1B,UAAU,EAAE,OAAO,EAAE,OAAO,GAAG,mBAAmB,EAAE,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM7D,SAAS,EAAE,OAAO,EAAE,OAAO,GAAG,oCAAoC,EAAE,SAAS;AAC/E,CAAC;",
  "names": []
}
