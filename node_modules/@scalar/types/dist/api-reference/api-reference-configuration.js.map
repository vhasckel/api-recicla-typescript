{
  "version": 3,
  "sources": ["../../src/api-reference/api-reference-configuration.ts"],
  "sourcesContent": ["import { type ZodType, z } from 'zod'\n\nimport type { TargetId } from '../snippetz'\nimport { apiReferencePluginSchema } from './api-reference-plugin'\nimport type { AuthenticationConfiguration } from './authentication-configuration'\nimport { NEW_PROXY_URL, OLD_PROXY_URL, baseConfigurationSchema } from './base-configuration'\nimport { type SourceConfiguration, sourceConfigurationSchema } from './source-configuration'\n\n// Zod Schemas don't work well with async functions, so we use a custom type instead.\nconst fetchLikeSchema = z.custom<(input: string | URL | Request, init?: RequestInit) => Promise<Response>>()\n\n/**\n * Standard configuration for the Api Reference.\n *\n * This is used internally to the configure the applications and does not include the sources.\n *\n * Sources should only be specified in the user facing configurations.\n *\n * In the the future it is likely sources will be removed completely from the configuration and instead\n * specified through a separate addDocument interface.\n */\nexport const apiReferenceConfigurationSchema = baseConfigurationSchema.extend({\n  /**\n   * The layout to use for the references\n   * @default 'modern'\n   */\n  layout: z.enum(['modern', 'classic']).optional().default('modern').catch('modern'),\n  /**\n   * URL to a request proxy for the API client\n   * @deprecated Use proxyUrl instead\n   */\n  proxy: z.string().optional(),\n  /**\n   * Custom fetch function for custom logic\n   *\n   * Can be used to add custom headers, handle auth, etc.\n   */\n  fetch: fetchLikeSchema.optional(),\n  /**\n   * Plugins for the API reference\n   */\n  plugins: z.array(apiReferencePluginSchema).optional(),\n  /**\n   * Allows the user to inject an editor for the spec\n   * @default false\n   */\n  isEditable: z.boolean().optional().default(false).catch(false),\n  /**\n   * Controls whether the references show a loading state in the intro\n   * @default false\n   */\n  isLoading: z.boolean().optional().default(false).catch(false),\n  /**\n   * Whether to show models in the sidebar, search, and content.\n   * @default false\n   */\n  hideModels: z.boolean().optional().default(false).catch(false),\n  /**\n   * Sets the file type of the document to download, set to `none` to hide the download button\n   * @default 'both'\n   */\n  documentDownloadType: z.enum(['yaml', 'json', 'both', 'direct', 'none']).optional().default('both').catch('both'),\n  /**\n   * Whether to show the \"Download OpenAPI Document\" button\n   * @default false\n   * @deprecated Use `documentDownloadType: 'none'` instead\n   */\n  hideDownloadButton: z.boolean().optional(),\n  /**\n   * Whether to show the \"Test Request\" button\n   * @default false\n   */\n  hideTestRequestButton: z.boolean().optional().default(false).catch(false),\n  /**\n   * Whether to show the sidebar search bar\n   * @default false\n   */\n  hideSearch: z.boolean().optional().default(false).catch(false),\n  /**\n   * Whether to show the operationId\n   *\n   * @default false\n   */\n  showOperationId: z.boolean().optional().default(false).catch(false),\n  /** Whether dark mode is on or off initially (light mode) */\n  darkMode: z.boolean().optional(),\n  /** forceDarkModeState makes it always this state no matter what */\n  forceDarkModeState: z.enum(['dark', 'light']).optional(),\n  /**\n   * Whether to show the dark mode toggle\n   * @default false\n   */\n  hideDarkModeToggle: z.boolean().optional().default(false).catch(false),\n  /**\n   * If used, passed data will be added to the HTML header\n   * @see https://unhead.unjs.io/usage/composables/use-seo-meta\n   */\n  metaData: z.any().optional(), // Using any for UseSeoMetaInput since it's an external type\n  /**\n   * Path to a favicon image\n   * @default undefined\n   * @example '/favicon.svg'\n   */\n  favicon: z.string().optional(),\n  /**\n   * List of httpsnippet clients to hide from the clients menu\n   * By default hides Unirest, pass `[]` to show all clients\n   */\n  hiddenClients: z\n    .union([z.record(z.string(), z.union([z.boolean(), z.array(z.string())])), z.array(z.string()), z.literal(true)])\n    .optional(),\n  /** Determine the HTTP client that's selected by default */\n  defaultHttpClient: z\n    .object({\n      targetKey: z.custom<TargetId>(),\n      clientKey: z.string(),\n    })\n    .optional(),\n  /** Custom CSS to be added to the page */\n  customCss: z.string().optional(),\n  /** onSpecUpdate is fired on spec/swagger content change */\n  onSpecUpdate: z\n    .function({\n      input: [z.string()],\n      output: z.void(),\n    })\n    .optional(),\n  /** onServerChange is fired on selected server change */\n  onServerChange: z\n    .function({\n      input: [z.string()],\n      output: z.void(),\n    })\n    .optional(),\n  /** onDocumentSelect is fired when the config is selected */\n  onDocumentSelect: z\n    .function({\n      input: [],\n      // Why no output? https://github.com/scalar/scalar/pull/7047\n      // output: z.union([z.void(), z.promise(z.void())]),\n    })\n    .optional() as z.ZodType<(() => Promise<void> | void) | undefined>,\n  /** Callback fired when the reference is fully loaded */\n  onLoaded: z\n    .function({\n      input: [],\n      // Why no output? https://github.com/scalar/scalar/pull/7047\n      // output: z.union([z.void(), z.promise(z.void())]),\n    })\n    .optional() as z.ZodType<(() => Promise<void> | void) | undefined>,\n  /** onBeforeRequest is fired before the request is sent. You can modify the request here. */\n  onBeforeRequest: z\n    .function({\n      input: [z.object({ request: z.instanceof(Request) })],\n      // Why no output? https://github.com/scalar/scalar/pull/7047\n      // output: z.union([z.void(), z.promise(z.void())]),\n    })\n    .optional() as z.ZodType<((a: { request: Request }) => Promise<void> | void) | undefined>,\n  /**\n   * onShowMore is fired when the user clicks the \"Show more\" button on the references\n   * @param tagId - The ID of the tag that was clicked\n   */\n  onShowMore: z\n    .function({\n      input: [z.string()],\n      // Why no output? https://github.com/scalar/scalar/pull/7047\n      // output: z.union([z.void(), z.promise(z.void())]),\n    })\n    .optional() as z.ZodType<((a: string) => Promise<void> | void) | undefined>,\n  /**\n   * onSidebarClick is fired when the user clicks on a sidebar item\n   * @param href - The href of the sidebar item that was clicked\n   */\n  onSidebarClick: z\n    .function({\n      input: [z.string()],\n      // Why no output? https://github.com/scalar/scalar/pull/7047\n      // output: z.union([z.void(), z.promise(z.void())]),\n    })\n    .optional() as z.ZodType<((a: string) => Promise<void> | void) | undefined>,\n  /**\n   * Route using paths instead of hashes, your server MUST support this\n   * @example '/standalone-api-reference/:custom(.*)?'\n   * @experimental\n   * @default undefined\n   */\n  pathRouting: z\n    .object({\n      basePath: z.string(),\n    })\n    .optional(),\n  /**\n   * Customize the heading portion of the hash\n   * @param heading - The heading object\n   * @returns A string ID used to generate the URL hash\n   * @default (heading) => `#description/${heading.slug}`\n   */\n  generateHeadingSlug: z\n    .function({\n      input: [z.object({ slug: z.string().default('headingSlug') })],\n      output: z.string(),\n    })\n    .optional(),\n  /**\n   * Customize the model portion of the hash\n   * @param model - The model object with a name property\n   * @returns A string ID used to generate the URL hash\n   * @default (model) => slug(model.name)\n   */\n  generateModelSlug: z\n    .function({\n      input: [z.object({ name: z.string().default('modelName') })],\n      output: z.string(),\n    })\n    .optional(),\n  /**\n   * Customize the tag portion of the hash\n   * @param tag - The tag object\n   * @returns A string ID used to generate the URL hash\n   * @default (tag) => slug(tag.name)\n   */\n  generateTagSlug: z\n    .function({\n      input: [z.object({ name: z.string().default('tagName') })],\n      output: z.string(),\n    })\n    .optional(),\n  /**\n   * Customize the operation portion of the hash\n   * @param operation - The operation object\n   * @returns A string ID used to generate the URL hash\n   * @default (operation) => `${operation.method}${operation.path}`\n   */\n  generateOperationSlug: z\n    .function({\n      input: [\n        z.object({\n          path: z.string(),\n          operationId: z.string().optional(),\n          method: z.string(),\n          summary: z.string().optional(),\n        }),\n      ],\n      output: z.string(),\n    })\n    .optional(),\n  /**\n   * Customize the webhook portion of the hash\n   * @param webhook - The webhook object\n   * @returns A string ID used to generate the URL hash\n   * @default (webhook) => slug(webhook.name)\n   */\n  generateWebhookSlug: z\n    .function({\n      input: [\n        z.object({\n          name: z.string(),\n          method: z.string().optional(),\n        }),\n      ],\n      output: z.string(),\n    })\n    .optional(),\n  /**\n   * To handle redirects, pass a function that will recieve:\n   * - The current path with hash if pathRouting is enabled\n   * - The current hash if hashRouting (default)\n   * And then passes that to history.replaceState\n   *\n   * @example hashRouting (default)\n   * ```ts\n   * redirect: (hash: string) => hash.replace('#v1/old-path', '#v2/new-path')\n   * ```\n   * @example pathRouting\n   * ```ts\n   * redirect: (pathWithHash: string) => {\n   *   if (pathWithHash.includes('#')) {\n   *     return pathWithHash.replace('/v1/tags/user#operation/get-user', '/v1/tags/user/operation/get-user')\n   *   }\n   *   return null\n   * }\n   * ```\n   */\n  redirect: z\n    .function({\n      input: [z.string()],\n      output: z.string().nullable().optional(),\n    })\n    .optional(),\n  /**\n   * Whether to include default fonts\n   * @default true\n   */\n  withDefaultFonts: z.boolean().optional().default(true).catch(true),\n  /**\n   * Whether to expand all tags by default\n   *\n   * Warning this can cause performance issues on big documents\n   * @default false\n   */\n  defaultOpenAllTags: z.boolean().optional().default(false).catch(false),\n  /**\n   * Whether to expand all models by default\n   *\n   * Warning this can cause performance issues on big documents\n   * @default false\n   */\n  expandAllModelSections: z.boolean().optional().default(false).catch(false),\n  /**\n   * Whether to expand all responses by default\n   *\n   * Warning this can cause performance issues on big documents\n   * @default false\n   */\n  expandAllResponses: z.boolean().optional().default(false).catch(false),\n  /**\n   * Function to sort tags\n   * @default 'alpha' for alphabetical sorting\n   */\n  tagsSorter: z\n    .union([\n      z.literal('alpha'),\n      z.function({\n        input: [z.any(), z.any()],\n        output: z.number(),\n      }),\n    ])\n    .optional(),\n  /**\n   * Function to sort operations\n   * @default 'alpha' for alphabetical sorting\n   */\n  operationsSorter: z\n    .union([\n      z.literal('alpha'),\n      z.literal('method'),\n      z.function({\n        input: [z.any(), z.any()],\n        output: z.number(),\n      }),\n    ])\n    .optional(),\n  /**\n   * Order the schema properties by\n   * @default 'alpha' for alphabetical sorting\n   */\n  orderSchemaPropertiesBy: z\n    .union([z.literal('alpha'), z.literal('preserve')])\n    .optional()\n    .default('alpha')\n    .catch('alpha'),\n  /**\n   * Sort the schema properties by required ones first\n   * @default true\n   */\n  orderRequiredPropertiesFirst: z.boolean().optional().default(true).catch(true),\n})\n\n/**\n * Configuration for the Scalar Api Reference integrations\n *\n * See the type `ApiReferenceConfigurationWithSource` or `AnyApiReferenceConfiguration`\\\n * for the configuration that includes the sources for you OpenAPI documents\n */\nexport type ApiReferenceConfiguration = Omit<\n  z.infer<typeof apiReferenceConfigurationSchema>, // Remove deprecated attributes\n  'proxy' | 'spec' | 'authentication'\n> & {\n  authentication?: AuthenticationConfiguration\n} & {\n  /** @deprecated\n   * This type now refers to the base configuration that does not include the sources.\n   * Use the type `ApiReferenceConfigurationWithSource` instead.\n   */\n  url?: SourceConfiguration['url']\n  /** @deprecated\n   * This type now refers to the base configuration that does not include the sources.\n   * Use the type `ApiReferenceConfigurationWithSource` instead.\n   */\n  content?: SourceConfiguration['content']\n}\n\n/** Migrate the configuration through a transform */\n// const migrateConfiguration = <T extends z.infer<typeof _apiReferenceConfigurationSchema>>\n\n/** Configuration for the Api Reference */\nexport const apiReferenceConfigurationWithSourceSchema: ZodType<\n  Omit<ApiReferenceConfiguration, 'url' | 'content'> & SourceConfiguration\n> = apiReferenceConfigurationSchema.extend(sourceConfigurationSchema.shape).transform((configuration) => {\n  // Migrate hideDownloadButton to documentDownloadType\n  if (configuration.hideDownloadButton) {\n    console.warn(\n      `[DEPRECATED] You're using the deprecated 'hideDownloadButton' attribute. Use 'documentDownloadType: 'none'' instead.`,\n    )\n\n    configuration.documentDownloadType = 'none'\n  }\n\n  // Remove the spec prefix\n  if (configuration.spec?.url) {\n    console.warn(\n      `[DEPRECATED] You're using the deprecated 'spec.url' attribute. Remove the spec prefix and move the 'url' attribute to the top level.`,\n    )\n\n    configuration.url = configuration.spec.url\n    delete configuration.spec\n  }\n\n  if (configuration.spec?.content) {\n    console.warn(\n      `[DEPRECATED] You're using the deprecated 'spec.content' attribute. Remove the spec prefix and move the 'content' attribute to the top level.`,\n    )\n\n    configuration.content = configuration.spec.content\n    delete configuration.spec\n  }\n\n  // Migrate proxy URL\n  if (configuration.proxy) {\n    console.warn(\n      `[DEPRECATED] You're using the deprecated 'proxy' attribute, rename it to 'proxyUrl' or update the package.`,\n    )\n\n    if (!configuration.proxyUrl) {\n      configuration.proxyUrl = configuration.proxy\n    }\n\n    delete configuration.proxy\n  }\n\n  if (configuration.proxyUrl === OLD_PROXY_URL) {\n    console.warn(`[DEPRECATED] Warning: configuration.proxyUrl points to our old proxy (${OLD_PROXY_URL}).`)\n    console.warn(`[DEPRECATED] We are overwriting the value and use the new proxy URL (${NEW_PROXY_URL}) instead.`)\n    console.warn(\n      `[DEPRECATED] Action Required: You should manually update your configuration to use the new URL (${NEW_PROXY_URL}). Read more: https://github.com/scalar/scalar`,\n    )\n\n    configuration.proxyUrl = NEW_PROXY_URL\n  }\n\n  return configuration\n})\n\n/**\n * User facing configuration that includes the document source configuration\n */\nexport type ApiReferenceConfigurationWithSource = Omit<\n  z.infer<typeof apiReferenceConfigurationWithSourceSchema>,\n  // Remove deprecated attributes\n  'proxy' | 'spec' | 'authentication'\n> & {\n  authentication?: AuthenticationConfiguration\n}\n\n/**\n * When providing an array of configurations we extend with the default attribute\n * which indicates which configuration should be used as the default one\n */\nexport type ApiReferenceConfigurationWithDefault = ApiReferenceConfigurationWithSource & {\n  /** Whether to use this config as the default one */\n  default?: boolean\n}\n\n/**\n * Configuration for a single config with multiple sources\n * The configuration will be shared between the documents\n */\nexport type ApiReferenceConfigurationWithMultipleSources = ApiReferenceConfigurationWithSource & {\n  sources: (SourceConfiguration & { default?: boolean })[]\n}\n\n/** Configuration for multiple Api References */\nexport type AnyApiReferenceConfiguration =\n  | Partial<ApiReferenceConfigurationWithSource>\n  | Partial<ApiReferenceConfigurationWithMultipleSources>\n  | Partial<ApiReferenceConfigurationWithDefault>[]\n  | Partial<ApiReferenceConfigurationWithMultipleSources>[]\n\n/** Typeguard to check to narrow the configs to the one with sources */\nexport const isConfigurationWithSources = (\n  config: AnyApiReferenceConfiguration,\n): config is Partial<ApiReferenceConfigurationWithMultipleSources> =>\n  Boolean(!Array.isArray(config) && config && 'sources' in config && Array.isArray(config.sources))\n"],
  "mappings": "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",
  "names": []
}
