{
  "version": 3,
  "sources": ["../../src/snippetz/snippetz.ts"],
  "sourcesContent": ["import type { Request as HarRequest } from 'har-format'\nimport type { Writable } from 'type-fest'\n\nexport type { Param as FormDataParam, Request as HarRequest } from 'har-format'\n\n/**\n * List of available clients\n */\nexport const AVAILABLE_CLIENTS = [\n  'c/libcurl',\n  'clojure/clj_http',\n  'csharp/httpclient',\n  'csharp/restsharp',\n  'dart/http',\n  'fsharp/httpclient',\n  'go/native',\n  'http/http1.1',\n  'java/asynchttp',\n  'java/nethttp',\n  'java/okhttp',\n  'java/unirest',\n  'js/axios',\n  'js/fetch',\n  'js/jquery',\n  'js/ofetch',\n  'js/xhr',\n  'kotlin/okhttp',\n  'node/axios',\n  'node/fetch',\n  'node/ofetch',\n  'node/undici',\n  'objc/nsurlsession',\n  'ocaml/cohttp',\n  'php/curl',\n  'php/guzzle',\n  'powershell/restmethod',\n  'powershell/webrequest',\n  'python/python3',\n  'python/requests',\n  'python/httpx_sync',\n  'python/httpx_async',\n  'r/httr',\n  'ruby/native',\n  'rust/reqwest',\n  'shell/curl',\n  'shell/httpie',\n  'shell/wget',\n  'swift/nsurlsession',\n] as const\n\n/** Non read only tuple of available clients */\nexport type AvailableClients = Writable<typeof AVAILABLE_CLIENTS>\n/** A union for a single available client */\nexport type AvailableClient = AvailableClients[number]\n/** A non read only array of available clients */\nexport type AvailableClientsArray = AvailableClients[number][]\n\n/** Programming language */\nexport type TargetId = AvailableClients[number] extends `${infer T}/${string}` ? T : never\n\n/** Configuration for a target */\nexport type Target = {\n  [K in TargetId]: {\n    key: K\n    title: string\n    default: ClientId<K>\n    clients: Plugin[]\n  }\n}[TargetId]\n\n/** HTTP client */\nexport type ClientId<T extends string> = T extends TargetId\n  ? Extract<AvailableClients[number], `${T}/${string}`> extends `${T}/${infer C}`\n    ? C\n    : never\n  : never\n\n/** What any plugins needs to return */\nexport type Plugin = {\n  /** The language or environment. */\n  target: TargetId\n  /** The identifier of the client. */\n  client: ClientId<TargetId>\n  /** The title of the client. */\n  title: string\n  /** The actual source code. */\n  generate: (request?: Partial<HarRequest>, configuration?: PluginConfiguration) => string\n}\n\n/**\n * Optional configuration for any plugin\n */\nexport type PluginConfiguration = {\n  /** Credentials to add HTTP Basic Authentication */\n  auth?: { username: string; password: string }\n}\n"],
  "mappings": "AAQO,MAAM,oBAAoB;AAAA,EAC/B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;",
  "names": []
}
